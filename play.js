const { connect } = require('./client');
const setupInput = function() {
  const stdin = process.stdin;
  stdin.setRawMode(true);
  stdin.setEncoding('utf8');
  stdin.resume();
  const handleUserInput = () => {
    stdin.on('data', (key) => {
      if (key === '\u0003') {
        process.exit();
      }
    })
  }
  handleUserInput()
  // handleUserInput
  return stdin;
}
setupInput()
console.log('Connecting ...');
connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();
// connect();